{"version":3,"sources":["components/TaskComponent/TaskComponent.js","models/TaskModel/TaskModel.js","pages/TasksPage/TasksPage.js","App.js","reportWebVitals.js","index.js"],"names":["TaskComponent","taskText","taskStatus","index","toggle","removeTask","className","type","checked","onChange","onClick","alert","TaskModel","text","status","this","TasksPage","React","useState","tasks","setTasks","filteredTasks","setFilter","openTasks","filter","task","length","handleRemove","tasksArray","splice","handleToggle","useEffect","map","placeholder","onKeyPress","e","newTask","charCode","target","value","concat","id","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RA8CeA,MA3Cf,YAA2E,IAAnDC,EAAkD,EAAlDA,SAAUC,EAAwC,EAAxCA,WAAYC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,WAwBzD,OACI,sBAAKC,UAAU,SAAf,UACI,uBAAOA,UAAU,YAAYC,KAAK,WAAWC,QAASN,EAAYO,SAAU,WAVhFL,EAAOD,MAWH,sBAAMG,UAAWJ,EAAY,OAAS,GAAtC,SAA2CD,IAE3C,mBAAGK,UAAU,eAAeI,QAAS,kBATzCC,MAAM,mDACNN,EAAWF,U,OChBJS,EANX,WAAYC,EAAMC,GAAS,oBACvBC,KAAKF,KAAOA,EACZE,KAAKD,OAASA,GCmEPE,MAlEf,WACI,MAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAmCH,IAAMC,SAAS,IAAlD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEIC,EAAYJ,EAAMK,QAAO,SAAAC,GAAI,OAAMA,EAAKX,UAASY,OAiCrD,SAASC,EAAaxB,GAClB,IAAMyB,EAAU,YAAOT,GACvBS,EAAWC,OAAO1B,EAAO,GACzBiB,EAASQ,GAGb,SAASE,EAAa3B,GAClB,IAAMyB,EAAU,YAAOT,GACvBS,EAAWzB,GAAOW,QAAWc,EAAWzB,GAAOW,OAC/CM,EAASQ,GAGb,OAjCAX,IAAMc,WAAU,WACZT,EAAUH,EAAMa,KAAI,SAACP,EAAMtB,GAAP,OAAiB,cAAC,EAAD,CAA2BF,SAAUwB,EAAKZ,KAAMX,WAAYuB,EAAKX,OAAQX,MAAOA,EAAOC,OAAQ0B,EAAczB,WAAYsB,GAArGxB,SAC1D,CAACgB,IAgCA,sBAAKb,UAAU,UAAf,UACI,uCACA,uBAAOC,KAAK,OAAO0B,YAAY,eAAeC,WA7CtD,SAAqBC,GAarB,IAAiBC,EAZM,KAAfD,EAAEE,UACqB,KAAnBF,EAAEG,OAAOC,QAWJH,EAVGD,EAAEG,OAAOC,MAWzBnB,EAASD,EAAMqB,OAAO,IAAI5B,EAAUwB,GAAS,KAC7Cd,EAAUH,EAAMa,KAAI,SAACP,EAAMtB,GAAP,OAAiB,cAAC,EAAD,CAA2BF,SAAUwB,EAAKZ,KAAMX,WAAYuB,EAAKX,OAAQX,MAAOA,EAAOC,OAAQ0B,EAAczB,WAAYsB,GAArGxB,OAXjDgC,EAAEG,OAAOC,MAAQ,OA0CpBlB,EACD,qBAAKf,UAAU,cAAf,SACKiB,EAAY,EAAIA,EAAY,cAAgB,KAEjD,sBAAKkB,GAAG,gBAAR,UACI,wBAAQlC,KAAK,SAASG,QAAS,WAhCvCY,EAAUH,EAAMa,KAAI,SAACP,EAAMtB,GAAP,OAAiB,cAAC,EAAD,CAA2BF,SAAUwB,EAAKZ,KAAMX,WAAYuB,EAAKX,OAAQX,MAAOA,EAAOC,OAAQ0B,EAAczB,WAAYsB,GAArGxB,QAgCjD,iBACA,wBAAQI,KAAK,SAASG,QAAS,WA7BvCY,EAAUH,EAAMK,QAAO,SAAAC,GAAI,OAAMA,EAAKX,UAASkB,KAAI,SAACP,EAAMtB,GAAP,OAAiB,cAAC,EAAD,CAA2BF,SAAUwB,EAAKZ,KAAMX,WAAYuB,EAAKX,OAAQX,MAAOA,EAAOC,OAAQ0B,EAAczB,WAAYsB,GAArGxB,QA6BhF,kBACA,wBAAQI,KAAK,SAASG,QAAS,WA1BvCY,EAAUH,EAAMK,QAAO,SAAAC,GAAI,OAAKA,EAAKX,UAASkB,KAAI,SAACP,EAAMtB,GAAP,OAAiB,cAAC,EAAD,CAA2BF,SAAUwB,EAAKZ,KAAMX,WAAYuB,EAAKX,OAAQX,MAAOA,EAAOC,OAAQ0B,EAAczB,WAAYsB,GAArGxB,QA0B/E,8BCtDDuC,MARf,WACE,OACE,qBAAKpC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSqC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.40718351.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TaskComponent.css';\r\n\r\nfunction TaskComponent({taskText, taskStatus, index, toggle, removeTask}) {\r\n\r\n    // function showModal() {\r\n    //     document.getElementsByClassName(\"modal\")[0].style.display = \"block\";\r\n    // }\r\n\r\n    // function closeModal() {\r\n    //     document.getElementsByClassName(\"modal\")[0].style.display = \"none\";\r\n    // }\r\n\r\n    // function handleYes() {\r\n    //     closeModal();\r\n    //     removeTask(index);\r\n    // }\r\n    \r\n    function onToggle() {\r\n        toggle(index);\r\n    }\r\n\r\n    function showAlert() {\r\n        alert(\"This task is removed from your tasks list!\");\r\n        removeTask(index);\r\n    }\r\n\r\n    return (\r\n        <div className=\"c-task\">\r\n            <input className=\"checkItem\" type=\"checkbox\" checked={taskStatus} onChange={() => onToggle()}/>\r\n            <span className={taskStatus? \"done\" : \"\"}>{taskText}</span>\r\n            {/* <i className=\"fas fa-times\" onClick={() => showModal()}></i> */}\r\n            <i className=\"fas fa-times\" onClick={() => showAlert()}></i>\r\n            \r\n            {/* <div className=\"modal\">\r\n                <div className=\"modal-content\">\r\n                    <span className=\"close\" onClick={() => closeModal()}>&times;</span>\r\n                    <p>Are you sure you want to delete this task?</p>\r\n                    <button type=\"button\" onClick={() => handleYes()}>Yes</button>\r\n                    <button type=\"button\" onClick={() => closeModal()}>No</button>\r\n                </div>\r\n            </div> */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TaskComponent;","\r\nclass TaskModel {\r\n    constructor(text, status) {\r\n        this.text = text;\r\n        this.status = status;\r\n    }\r\n}\r\n\r\nexport default TaskModel;","import React from 'react';\r\nimport './TasksPage.css';\r\nimport TaskComponent from '../../components/TaskComponent/TaskComponent';\r\nimport TaskModel from '../../models/TaskModel/TaskModel';\r\n\r\nfunction TasksPage() {\r\n    const [tasks, setTasks] = React.useState([]);\r\n    const [filteredTasks, setFilter] = React.useState([]);\r\n    \r\n    var openTasks = tasks.filter(task => !(task.status)).length;\r\n\r\n\r\n    function handleClick(e) {\r\n        if (e.charCode === 13) {\r\n            if (e.target.value !== \"\") {\r\n                addTask(e.target.value);\r\n                e.target.value = \"\";\r\n            }\r\n        }\r\n    }\r\n\r\n    React.useEffect(()=> {\r\n        setFilter(tasks.map((task, index) => <TaskComponent key={index} taskText={task.text} taskStatus={task.status} index={index} toggle={handleToggle} removeTask={handleRemove}/>));\r\n    }, [tasks]);\r\n\r\n    function addTask(newTask) {\r\n        setTasks(tasks.concat(new TaskModel(newTask, false)));\r\n        setFilter(tasks.map((task, index) => <TaskComponent key={index} taskText={task.text} taskStatus={task.status} index={index} toggle={handleToggle} removeTask={handleRemove}/>));\r\n    }\r\n\r\n    function showAll() {\r\n        setFilter(tasks.map((task, index) => <TaskComponent key={index} taskText={task.text} taskStatus={task.status} index={index} toggle={handleToggle} removeTask={handleRemove}/>));\r\n    }\r\n\r\n    function showOpen() {\r\n        setFilter(tasks.filter(task => !(task.status)).map((task, index) => <TaskComponent key={index} taskText={task.text} taskStatus={task.status} index={index} toggle={handleToggle} removeTask={handleRemove}/>));\r\n    }\r\n\r\n    function showCompleted() {\r\n        setFilter(tasks.filter(task => (task.status)).map((task, index) => <TaskComponent key={index} taskText={task.text} taskStatus={task.status} index={index} toggle={handleToggle} removeTask={handleRemove}/>));\r\n    }\r\n\r\n    function handleRemove(index) {\r\n        const tasksArray = [...tasks];\r\n        tasksArray.splice(index, 1);\r\n        setTasks(tasksArray);\r\n    }\r\n\r\n    function handleToggle(index) {\r\n        const tasksArray = [...tasks];\r\n        tasksArray[index].status = !(tasksArray[index].status);\r\n        setTasks(tasksArray);\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-tasks\">\r\n            <h1>Todos</h1>\r\n            <input type=\"text\" placeholder=\"What's next?\" onKeyPress={handleClick}/>\r\n            {filteredTasks}\r\n            <div className=\"remainItems\">\r\n                {openTasks > 0 ? openTasks + \" Items Left\" : \"\"}\r\n            </div>\r\n            <div id=\"filterButtons\">\r\n                <button type=\"button\" onClick={() => showAll()}>All</button>\r\n                <button type=\"button\" onClick={() => showOpen()}>Open</button>\r\n                <button type=\"button\" onClick={() => showCompleted()}>Completed</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TasksPage;","import './App.css';\r\nimport TasksPage from './pages/TasksPage/TasksPage';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <TasksPage/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}